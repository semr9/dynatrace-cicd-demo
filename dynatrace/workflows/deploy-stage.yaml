# Dynatrace Workflow for Deploy Stage Automation
# Monitors deployment health and configuration drift

workflow:
  name: "Deploy Stage Monitoring"
  description: "Monitors deployment process and detects configuration drift"
  trigger:
    type: "log"
    conditions:
      - logSource: "kubernetes"
        query: "content CONTAINS 'DEPLOYMENT_START'"
  tasks:
    - name: "check_deployment_health"
      type: "DQL"
      query: |
        fetch logs
        | filter log.source == "kubernetes"
        | filter content contains "DEPLOYMENT"
        | summarize deployment_status = any(content) by timestamp
      action:
        type: "conditional"
        conditions:
          - when: "result.deployment_status contains 'FAILED'"
            then:
              - name: "rollback_deployment"
                type: "HTTP"
                config:
                  url: "https://kubernetes.default.svc/api/v1/namespaces/ecommerce-demo/deployments/${DEPLOYMENT_NAME}/rollback"
                  method: "POST"
                  headers:
                    Authorization: "Bearer ${K8S_TOKEN}"
              - name: "alert_deployment_failure"
                type: "SLACK"
                config:
                  webhook: "${SLACK_WEBHOOK}"
                  message: "Deployment failed for ${DEPLOYMENT_NAME}. Rollback initiated."
                  channel: "#dev-alerts"

---
# Configuration Drift Detection Workflow
workflow:
  name: "Configuration Drift Detection"
  description: "Detects configuration drift between staging and production"
  trigger:
    type: "schedule"
    schedule: "0 */6 * * *" # Every 6 hours
  tasks:
    - name: "compare_configurations"
      type: "DQL"
      query: |
        fetch logs
        | filter log.source == "config-comparison"
        | filter content contains "CONFIG_DRIFT"
        | summarize drift_detected = any(content) by timestamp
      action:
        type: "conditional"
        conditions:
          - when: "result.drift_detected contains 'DRIFT_DETECTED'"
            then:
              - name: "generate_config_report"
                type: "HTTP"
                config:
                  url: "https://api.dynatrace.com/v2/config/configurations"
                  method: "GET"
                  headers:
                    Authorization: "Api-Token ${DYNATRACE_TOKEN}"
              - name: "notify_config_drift"
                type: "SLACK"
                config:
                  webhook: "${SLACK_WEBHOOK}"
                  message: "Configuration drift detected between environments. Report generated."
                  channel: "#platform-alerts"

---
# Traffic Analysis Workflow
workflow:
  name: "Traffic Analysis"
  description: "Analyzes traffic patterns and predicts capacity needs"
  trigger:
    type: "schedule"
    schedule: "0 */1 * * *" # Every hour
  tasks:
    - name: "analyze_traffic_patterns"
      type: "DQL"
      query: |
        fetch metrics
        | filter metricId == "builtin:host.cpu.usage"
        | summarize avg_usage = avg(value) by timestamp
        | filter avg_usage > 80
      action:
        type: "conditional"
        conditions:
          - when: "result.avg_usage > 80"
            then:
              - name: "scale_services"
                type: "HTTP"
                config:
                  url: "https://kubernetes.default.svc/apis/apps/v1/namespaces/ecommerce-demo/deployments/${DEPLOYMENT_NAME}/scale"
                  method: "PATCH"
                  headers:
                    Authorization: "Bearer ${K8S_TOKEN}"
                  body: '{"spec":{"replicas":4}}'
              - name: "notify_auto_scaling"
                type: "SLACK"
                config:
                  webhook: "${SLACK_WEBHOOK}"
                  message: "High CPU usage detected. Auto-scaling triggered."
                  channel: "#platform-alerts"
