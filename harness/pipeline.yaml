pipeline:
  name: "E-commerce Demo Pipeline"
  identifier: "ecommerce_demo_pipeline"
  projectIdentifier: "dynatrace_demo"
  orgIdentifier: "default"
  tags: 
    environment: "demo"
    service: "ecommerce"
    team: "platform"
  properties:
    ci:
      codebase:
        connectorRef: "github_connector"
        repoName: "dynatrace-cicd-demo"
        build: <+input>
  stages:
    - stage:
        name: "Build"
        identifier: "Build"
        description: "Build and push Docker images for all services"
        type: "CI"
        spec:
          cloneCodebase: true
          execution:
            steps:
              - step:
                  type: "BuildAndPushDockerRegistry"
                  name: "Build Frontend Image"
                  identifier: "BuildFrontendImage"
                  spec:
                    connectorRef: "docker_hub_connector"
                    repo: "your-dockerhub/ecommerce-frontend"
                    tags:
                      - <+pipeline.sequenceId>
                      - latest
                    dockerfile: "frontend/Dockerfile"
                    context: "."
                    resources:
                      limits:
                        memory: "2Gi"
                        cpu: "1000m"
              - step:
                  type: "BuildAndPushDockerRegistry"
                  name: "Build API Gateway Image"
                  identifier: "BuildAPIGatewayImage"
                  spec:
                    connectorRef: "docker_hub_connector"
                    repo: "your-dockerhub/ecommerce-api-gateway"
                    tags:
                      - <+pipeline.sequenceId>
                      - latest
                    dockerfile: "backend/api-gateway/Dockerfile"
                    context: "."
                    resources:
                      limits:
                        memory: "2Gi"
                        cpu: "1000m"
              - step:
                  type: "BuildAndPushDockerRegistry"
                  name: "Build User Service Image"
                  identifier: "BuildUserServiceImage"
                  spec:
                    connectorRef: "docker_hub_connector"
                    repo: "your-dockerhub/ecommerce-user-service"
                    tags:
                      - <+pipeline.sequenceId>
                      - latest
                    dockerfile: "backend/user-service/Dockerfile"
                    context: "."
                    resources:
                      limits:
                        memory: "2Gi"
                        cpu: "1000m"
              - step:
                  type: "BuildAndPushDockerRegistry"
                  name: "Build Product Service Image"
                  identifier: "BuildProductServiceImage"
                  spec:
                    connectorRef: "docker_hub_connector"
                    repo: "your-dockerhub/ecommerce-product-service"
                    tags:
                      - <+pipeline.sequenceId>
                      - latest
                    dockerfile: "backend/product-service/Dockerfile"
                    context: "."
                    resources:
                      limits:
                        memory: "2Gi"
                        cpu: "1000m"
              - step:
                  type: "BuildAndPushDockerRegistry"
                  name: "Build Order Service Image"
                  identifier: "BuildOrderServiceImage"
                  spec:
                    connectorRef: "docker_hub_connector"
                    repo: "your-dockerhub/ecommerce-order-service"
                    tags:
                      - <+pipeline.sequenceId>
                      - latest
                    dockerfile: "backend/order-service/Dockerfile"
                    context: "."
                    resources:
                      limits:
                        memory: "2Gi"
                        cpu: "1000m"
              - step:
                  type: "BuildAndPushDockerRegistry"
                  name: "Build Payment Service Image"
                  identifier: "BuildPaymentServiceImage"
                  spec:
                    connectorRef: "docker_hub_connector"
                    repo: "your-dockerhub/ecommerce-payment-service"
                    tags:
                      - <+pipeline.sequenceId>
                      - latest
                    dockerfile: "backend/payment-service/Dockerfile"
                    context: "."
                    resources:
                      limits:
                        memory: "2Gi"
                        cpu: "1000m"
    - stage:
        name: "Deploy to Staging"
        identifier: "DeployToStaging"
        description: "Deploy to staging environment for testing"
        type: "Deployment"
        spec:
          deploymentType: "Kubernetes"
          service:
            serviceRef: "ecommerce-service"
          environment:
            environmentRef: "staging"
            deployToAll: false
            infrastructureDefinitions:
              - identifier: "staging-k8s"
          execution:
            steps:
              - step:
                  type: "K8sRollingDeploy"
                  name: "Rolling Deployment"
                  identifier: "RollingDeployment"
                  spec:
                    skipDryRun: false
                    skipResourceVersioning: false
                    timeout: "20m"
                    resources:
                      limits:
                        memory: "2Gi"
                        cpu: "1000m"
              - step:
                  type: "K8sDelete"
                  name: "Cleanup Old Resources"
                  identifier: "CleanupOldResources"
                  spec:
                    deleteResources:
                      type: "ManifestPath"
                      spec:
                        manifestPaths:
                          - "k8s/staging/"
    - stage:
        name: "Test"
        identifier: "Test"
        description: "Run automated tests and validation"
        type: "CI"
        spec:
          cloneCodebase: true
          execution:
            steps:
              - step:
                  type: "RunTests"
                  name: "API Tests"
                  identifier: "APITests"
                  spec:
                    connectorRef: "github_connector"
                    image: "node:18-alpine"
                    shell: "Sh"
                    command: |
                      npm install -g newman
                      newman run tests/api-tests.json --environment tests/staging-environment.json
                    resources:
                      limits:
                        memory: "1Gi"
                        cpu: "500m"
              - step:
                  type: "RunTests"
                  name: "Load Tests"
                  identifier: "LoadTests"
                  spec:
                    connectorRef: "github_connector"
                    image: "grafana/k6:latest"
                    shell: "Sh"
                    command: |
                      k6 run tests/load-tests.js --env BASE_URL=http://staging-api-gateway:4000
                    resources:
                      limits:
                        memory: "1Gi"
                        cpu: "500m"
              - step:
                  type: "RunTests"
                  name: "Security Tests"
                  identifier: "SecurityTests"
                  spec:
                    connectorRef: "github_connector"
                    image: "owasp/zap2docker-stable:latest"
                    shell: "Sh"
                    command: |
                      zap-baseline.py -t http://staging-api-gateway:4000
                    resources:
                      limits:
                        memory: "2Gi"
                        cpu: "1000m"
    - stage:
        name: "Deploy to Production"
        identifier: "DeployToProduction"
        description: "Deploy to production environment"
        type: "Deployment"
        spec:
          deploymentType: "Kubernetes"
          service:
            serviceRef: "ecommerce-service"
          environment:
            environmentRef: "production"
            deployToAll: false
            infrastructureDefinitions:
              - identifier: "production-k8s"
          execution:
            steps:
              - step:
                  type: "K8sRollingDeploy"
                  name: "Production Rolling Deployment"
                  identifier: "ProductionRollingDeployment"
                  spec:
                    skipDryRun: false
                    skipResourceVersioning: false
                    timeout: "30m"
                    resources:
                      limits:
                        memory: "2Gi"
                        cpu: "1000m"
              - step:
                  type: "K8sDelete"
                  name: "Cleanup Production Resources"
                  identifier: "CleanupProductionResources"
                  spec:
                    deleteResources:
                      type: "ManifestPath"
                      spec:
                        manifestPaths:
                          - "k8s/production/"
